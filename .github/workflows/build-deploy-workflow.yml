name: Build-Deploy Workflow

on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
      tag:
        required: true
        type: string
      action:
        required: true
        type: string
      builder:
        required: false
        type: string
        default: 'maven'


env:
  CF_ACCESS_CLIENT_ID: ${{ secrets.CF_ACCESS_CLIENT_ID }}
  CF_ACCESS_CLIENT_SECRET: ${{ secrets.CF_ACCESS_CLIENT_SECRET }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      # - name: Logging
      #   run: |
      #    sudo apt-get install systemd moreutils -yq
      #    echo "${{toJSON(github.event)}}"
          
      - name: Prepare slack templates
        id: slack
        env:
          JOB_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          TITLE: "$${{ secrets.AWS_ECR_REPOSITORY }} : ${{ inputs.action }} action was triggered! Kicking off the apply on ${{ inputs.env }}. :white_check_mark:"
        run: |
          if [[ "${{ github.ref }}" == *"tags"* ]]; then
            export USER=${{ github.event.head_commit.author.username }}
            export PR_URL="https://github.com/tagsource/${{ secrets.AWS_ECR_REPOSITORY }}/releases/tag/${{  github.ref_name }}"
            export PR_TITLE="Release ${{ secrets.AWS_ECR_REPOSITORY }} tag ${{  inputs.tag }} on ${{ inputs.env }}"
          else
            export USER=${{ github.event.head_commit.author.username }}
            export PR_URL=${{ github.event.head_commit.url }}
            export PR_TITLE=$(echo "${{ github.event.head_commit.message }}" | tr -d '"<>' | tr '"\r\n' ' ')
          fi
          # export PR_TITLE=$(echo "${PR_TITLE}" | tr -d '"<>' | tr '"\r\n' ' ')
          echo $PR_URL
          echo $(envsubst < ./.github/workflows/slack-templates/approved.json) > notification-approved.json
          cat notification-approved.json

      - name: Notifify Approved Slack
        id: slack_approved
        uses: slackapi/slack-github-action@v1.19.0
        with:
          payload-file-path: "notification-approved.json"
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          
      - uses: actions/setup-java@v1
        if: inputs.env != 'prod' && inputs.action != 'Rollback'
        id: setup_java
        with:
          java-version: 17
          java-package: jdk
          architecture: x64
        
      - name: Configure AWS credentials and Assume role
        if: inputs.env != 'prod' && inputs.action != 'Rollback'
        id: aws_auth
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ECR_ROLE }}
          role-duration-seconds: 3600
          role-session-name: GitHubActions-${{ github.run_id }}

      - name: Identity Check
        if: inputs.env != 'prod' && inputs.action != 'Rollback'
        id: aws_auth_check_identity
        run: aws sts get-caller-identity
          
      - name: Login to Amazon ECR
        if: inputs.env != 'prod' && inputs.action != 'Rollback'
        id: login_ecr
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REPOSITORY_URL }}
      
      - name: Build, tag, and push image to Amazon ECR
        if: inputs.env != 'prod' && inputs.action != 'Rollback'
        id: build_push
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ECR_REPOSITORY_URL }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ inputs.tag }}
        run: |
          case "${{ inputs.builder }}" in 
            maven) ./mvnw spring-boot:build-image -Dspring-boot.build-image.imageName="$ECR_REGISTRY/$ECR_REPOSITORY":"$IMAGE_TAG" -DskipTests=true;;
            gradle*) ./gradlew bootBuildImage --imageName="$ECR_REGISTRY/$ECR_REPOSITORY":"$IMAGE_TAG";;
            docker) docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY":"$IMAGE_TAG" .;;
            *) echo "builder ${{ inputs.builder }} not defined!" && exit 1 
          esac
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: CheckoutInfrastructureLive
        uses: actions/checkout@v3
        with:
          repository: 'tagsource/infrastructure-live'
          token: ${{ secrets.GH_GRUNTY_OAUTH_TOKEN }}
          ssh-key: ${{ secrets.GH_SSH_KEY }}
          fetch-depth: 0

      - name: UpdateInfraLive
        id: update_live
        env: 
          SERVICE: ${{ secrets.AWS_ECR_REPOSITORY }}
          ENV: ${{ inputs.env }}
          IMAGE_TAG: ${{ inputs.tag }}
          DEPLOY_PATH: "${{ inputs.env }}/ap-southeast-1/${{ inputs.env }}/services/${{ secrets.AWS_ECR_REPOSITORY }}"
        run: |
          if [[ "${{ github.ref }}" == *"tags"* ]]; then
            export COMMIT_MESSAGE="Release ${{ secrets.AWS_ECR_REPOSITORY }} tag ${{  inputs.tag }} on ${{ inputs.env }}"
          else
            export COMMIT_MESSAGE=$(echo "${{ github.event.head_commit.message }}" | tr -d '"<>' | tr '"\r\n' ' ')
          fi
          echo "Updating service ${ENV} / ${SERVICE} with Tag ${IMAGE_TAG}"
          #ls -l
          sed -i "s/\(.*tag .*\)[^ ]*\( .*\)/\1 \"${IMAGE_TAG}\"/" ${DEPLOY_PATH}/terragrunt.hcl
          git config user.name grunty-tagme
          git config user.email grunty@tagme.pk
          git diff
          git commit -am "${COMMIT_MESSAGE}"
          git push

      # - name: SetupInfrastructureDeployer
      #   id: setup_deployer
      #   env:
      #     GRUNTWORK_INSTALLER_VERSION: "v0.0.37"
      #     MODULE_CI_VERSION: "v0.38.4"
      #     MODULE_SECURITY_VERSION: "v0.53.6"
      #     GITHUB_OAUTH_TOKEN: ${{ secrets.GH_GRUNTY_OAUTH_TOKEN }}
      #   run: |
      #     curl -Ls https://raw.githubusercontent.com/gruntwork-io/gruntwork-installer/master/bootstrap-gruntwork-installer.sh \
      #       | bash /dev/stdin --version "$GRUNTWORK_INSTALLER_VERSION"
      #     gruntwork-install --repo "https://github.com/gruntwork-io/terraform-aws-ci" \
      #       --binary-name "infrastructure-deployer" \
      #       --tag "$MODULE_CI_VERSION"
      #     gruntwork-install --repo "https://github.com/gruntwork-io/terraform-aws-security" \
      #       --module-name "aws-auth" \
      #       --tag "$MODULE_SECURITY_VERSION"

      # - name: Configure AWS credentials and Assume role
      #   id: aws_auth
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-region: ${{ secrets.AWS_REGION }}
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     role-to-assume: ${{ secrets.AWS_ECR_ROLE }}
      #     role-duration-seconds: 3600
      #     role-session-name: GitHubActions-${{ github.run_id }}
      # - name: Identity Check
      #   id: aws_auth_check_identity
      #   run: aws sts get-caller-identity

      # - name: DeployDockerImage
      #   id: deploy_docker_image
      #   env:
      #     AWS_REGION: ${{ secrets.AWS_REGION }}
      #     DEFAULT_INFRA_LIVE_BRANCH: main
      #     INFRA_REPO: "git@github.com:tagsource/infrastructure-live.git"
      #     DEPLOY_PATH: "${{ inputs.env }}/ap-southeast-1/${{ inputs.env }}/services/${{ secrets.AWS_ECR_REPOSITORY }}"
      #     IMAGE_TAG: ${{ inputs.tag }}
      #     GITHUB_OAUTH_TOKEN: ${{ secrets.GH_GRUNTY_OAUTH_TOKEN }}
      #   run: |
      #       update_args=(--aws-region "$AWS_REGION" --)
      #       update_args+=(terraform-applier terraform-update-variable)
      #       update_args+=(--git-branch-name "$DEFAULT_INFRA_LIVE_BRANCH")
      #       update_args+=(--git-url "$INFRA_REPO")
      #       update_args+=(--vars-path "${DEPLOY_PATH}/terragrunt.hcl")
      #       update_args+=(--name "tag" --value "\"$IMAGE_TAG\"")
      #       update_args+=(--skip-ci-flag "")
      #       infrastructure-deployer "${update_args[@]}"

